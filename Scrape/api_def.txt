paddle.abs(x,name=None)
paddle.acos(x,name=None)
paddle.acosh(x,name=None)
paddle.add(x,y,name=None)
paddle.add_n(inputs,name=None)
paddle.addmm(input,x,y,beta=1.0,alpha=1.0,name=None)
paddle.all(x,axis=None,keepdim=False,name=None)
paddle.allclose(x,y,rtol=1e-05,atol=1e-08,equal_nan=False,name=None)
paddle.amax(x,axis=None,keepdim=False,name=None)
paddle.amin(x,axis=None,keepdim=False,name=None)
paddle.angle(x,name=None)
paddle.any(x,axis=None,keepdim=False,name=None)
paddle.arange(start=0,end=None,step=1,dtype=None,name=None)
paddle.argmax(x,axis=None,keepdim=False,dtype='int64',name=None)
paddle.argmin(x,axis=None,keepdim=False,dtype='int64',name=None)
paddle.argsort(x,axis=-1,descending=False,name=None)
paddle.as_complex(x,name=None)
paddle.as_real(x,name=None)
paddle.asin(x,name=None)
paddle.asinh(x,name=None)
paddle.assign(x,output=None)
paddle.atan(x,name=None)
paddle.atan2(x,y,name=None)
paddle.atanh(x,name=None)
paddle.batch(reader,batch_size,drop_last=False)
paddle.bernoulli(x,name=None)
paddle.bincount(x,weights=None,minlength=0,name=None)
paddle.bitwise_and(x,y,out=None,name=None)
paddle.bitwise_not(x,out=None,name=None)
paddle.bitwise_or(x,y,out=None,name=None)
paddle.bitwise_xor(x,y,out=None,name=None)
paddle.bmm(x,y,name=None)
paddle.broadcast_shape(x_shape,y_shape)
paddle.broadcast_tensors(input,name=None)
paddle.broadcast_to(x,shape,name=None)
paddle.bucketize(x,sorted_sequence,out_int32=False,right=False,name=None)
paddle.cast(x,dtype)
paddle.ceil(x,name=None)
paddle.check_shape(shape,op_name,expected_shape_type=(<class'list'>,<class'tuple'>,<class'paddle.fluid.framework.Variable'>),expected_element_type=(<class'int'>,<class'paddle.fluid.framework.Variable'>),expected_tensor_dtype=('int32','int64'))
paddle.chunk(x,chunks,axis=0,name=None)
paddle.clip(x,min=None,max=None,name=None)
paddle.clone(x,name=None)
paddle.complex(real,imag,name=None)
paddle.concat(x,axis=0,name=None)
paddle.conj(x,name=None)
paddle.cos(x,name=None)
paddle.cosh(x,name=None)
paddle.count_nonzero(x,axis=None,keepdim=False,name=None)
classpaddle.
paddle.create_parameter(shape,dtype,name=None,attr=None,is_bias=False,default_initializer=None)
paddle.crop(x,shape=None,offsets=None,name=None)
paddle.cross(x,y,axis=9,name=None)
classpaddle.CUDAPi
classpaddle.
paddle.cumprod(x,dim=None,dtype=None,name=None)
paddle.cumsum(x,axis=None,dtype=None,name=None)
classpaddle.DataParallel(layers,strategy=None,comm_buffer_size=25,last_comm_buffer_size=1,find_unused_parameters=False,group=None)
paddle.deg2rad(x,name=None)
paddle.diag(x,offset=0,padding_value=0,name=None)
paddle.diagflat(x,offset=0,name=None)
paddle.diagonal(x,offset=0,axis1=0,axis2=1,name=None)
paddle.diff(x,n=1,axis=-1,prepend=None,append=None,name=None)
paddle.digamma(x,name=None)
paddle.disable_signal_handler()
paddle.disable_static(place=None)
paddle.dist(x,y,p=2,name=None)
paddle.divide(x,y,name=None)
paddle.dot(x,y,name=None)
padd
paddle.einsum(equation,*operands)
paddle.empty(shape,dtype=None,name=None)
paddle.empty_like(x,dtype=None,name=None)
paddle.enable_static()
paddle.equal(x,y,name=None)
paddle.equal_all(x,y,name=None)
paddle.erf(x,name=None)
paddle.erfinv(x,name=None)
paddle.exp(x,name=None)
paddle.expand(x,shape,name=None)
paddle.expand_as(x,y,name=None)
paddle.expm1(x,name=None)
paddle.eye(num_rows,num_columns=None,dtype=None,name=None)
paddle.flatten(x,start_axis=0,stop_axis=-1,name=None)
paddle.flip(x,axis,name=None)
paddle.floor(x,name=None)
paddle.floor_divide(x,y,name=None)
paddle.floor_mod(x,y,name=None)
paddle.flops(net,input_size,custom_ops=None,print_detail=False)
paddle.fmax(x,y,name=None)
paddle.fmin(x,y,name=None)
paddle.frac(x,name=None)
paddle.full(shape,fill_value,dtype=None,name=None)
paddle.full_like(x,fill_value,dtype=None,name=None)
paddle.gather(x,index,axis=None,name=None)
paddle.gather_nd(x,index,name=None)
paddle.gcd(x,y,name=None)
paddle.get_cuda_rng_state()
paddle.get_default_dtype()
paddle.get_flags(flags)
paddle.grad(outputs,inputs,grad_outputs=None,retain_graph=None,create_graph=False,only_inputs=True,allow_unused=False,no_grad_vars=None)
paddle.greater_equal(x,y,name=None)
paddle.greater_than(x,y,name=None)
paddle.heaviside(x,y,name=None)
paddle.histogram(input,bins=100,min=0,max=0,name=None)
paddle.iinfo(dtype)
paddle.imag(x,name=None)
paddle.in_dynamic
paddle.increment(x,value=1.0,name=None)
paddle.index_add(x,index,axis,value,name=None)
paddle.index_add_(x,index,axis,value,name=None)
paddle.index_sample(x,index)
paddle.index_select(x,index,axis=0,name=None)
paddle.inner(x,y,name=None)
paddle.is_complex(x)
paddle.is_empty(x,name=None)
paddle.is_floating_point(x)
paddle.is_grad_enabled()
paddle.is_integer(x)
paddle.is_tensor(x)
paddle.isclose(x,y,rtol=1e-05,atol=1e-08,equal_nan=False,name=None)
paddle.isfinite(x,name=None)
paddle.isinf(x,name=None)
paddle.isnan(x,name=None)
paddle.kron(x,y,name=None)
paddle.kthvalue(x,k,axis=None,keepdim=False,name=None)
classpaddle.LazyGuard
paddle.lcm(x,y,name=None)
paddle.lerp(x,y,weight,name=None)
paddle.less_equal(x,y,name=None)
paddle.less_than(x,y,name=None)
paddle.lgamma(x,name=None)
paddle.linspace(start,stop,num,dtype=None,name=None)
paddle.load(path,**configs)
paddle.log(x,name=None)
paddle.log10(x,name=None)
paddle.log1p(x,name=None)
paddle.log2(x,name=None)
paddle.logcumsumexp(x,axis=None,dtype=None,name=None)
paddle.logical_and(x,y,out=None,name=None)
paddle.logical_not(x,out=None,name=None)
paddle.logical_or(x,y,out=None,name=None)
paddle.logical_xor(x,y,out=None,name=None)
paddle.logit(x,eps=None,name=None)
paddle.logspace(start,stop,num,base=10.0,dtype=None,name=None)
paddle.logsumexp(x,axis=None,keepdim=False,name=None)
paddle.masked_select(x,mask,name=None)
paddle.matmul(x,y,transpose_x=False,transpose_y=False,name=None)
paddle.max(x,axis=None,keepdim=False,name=None)
paddle.maximum(x,y,name=None)
paddle.mean(x,axis=None,keepdim=False,name=None)
paddle.median(x,axis=None,keepdim=False,name=None)
paddle.meshgrid(*args,**kwargs)
paddle.min(x,axis=None,keepdim=False,name=None)
paddle.minimum(x,y,name=None)
paddle.mm(input,mat2,name=None)
paddle.mode(x,axis=-1,keepdim=False,name=None)
classpaddle.Model(network,inputs=None,labels=None)
paddle.moveaxis(x,source,destination,name=None)
paddle.multinomial(x,num_samples=1,replacement=False,name=None)
paddle.multiplex(inputs,index,name=None)
paddle.multiply(x,y,name=None)
paddle.mv(x,vec,name=None)
paddle.nanmean(x,axis=None,keepdim=False,name=None)
paddle.nanmedian(x,axis=None,keepdim=True,name=None)
paddle.nanquantile(x,q,axis=None,keepdim=False)
paddle.nansum(x,axis=None,dtype=None,keepdim=False,name=None)
paddle.neg(x,name=None)
paddle.no_grad
paddle.nonzero(x,as_tuple=False)
paddle.normal(mean=0.0,std=1.0,shape=None,name=None)
paddle.not_equal(x,y,name=None)
classpaddle.
paddle.numel(x,name=None)
paddle.ones(shape,dtype=None,name=None)
paddle.ones_like(x,dtype=None,name=None)
paddle.outer(x,y,name=None)
classpaddle.ParamAttr(name=None,initializer=None,learning_rate=1.0,regularizer=None,trainable=True,do_model_average=True,need_clip=True)
paddle.poisson(x,name=None)
paddle.pow(x,y,name=None)
paddle.prod(x,axis=None,keepdim=False,dtype=None,name=None)
paddle.put_along_axis(arr,indices,values,axis,reduce='assign')
paddle.quantile(x,q,axis=None,keepdim=False)
paddle.rad2deg(x,name=None)
paddle.rand(shape,dtype=None,name=None)
paddle.randint(low=0,high=None,shape=[1],dtype=None,name=None)
paddle.randint_like(x,low=0,high=None,dtype=None,name=None)
paddle.randn(shape,dtype=None,name=None)
paddle.randperm(n,dtype='int64',name=None)
paddle.rank(input)
paddle.real(x,name=None)
paddle.reciprocal(x,name=None)
paddle.renorm(x,p,axis,max_norm)
paddle.repeat_interleave(x,repeats,axis=None,name=None)
paddle.reshape(x,shape,name=None)
paddle.reshape_(x,shape,name=None)
paddle.roll(x,shifts,axis=None,name=None)
paddle.rot90(x,k=1,axes=[0,1],name=None)
paddle.round(x,name=None)
paddle.rsqrt(x,name=None)
paddle.save(obj,path,protocol=4,**configs)
paddle.scale(x,scale=1.0,bias=0.0,bias_after_scale=True,act=None,name=None)
paddle.scatter(x,index,updates,overwrite=True,name=None)
paddle.scatter_(x,index,updates,overwrite=True,name=None)
paddle.scatter_nd(index,updates,shape,name=None)
paddle.scatter_nd_add(x,index,updates,name=None)
paddle.searchsorted(sorted_sequence,values,out_int32=False,right=False,name=None)
paddle.seed(seed)
paddle.set_cuda_rng_state(state_list)
paddle.set_default_dtype(d)
paddle.set_flags(flags)
paddle.set_grad_enabled(mode)
paddle.set_printoptions(precision=None,threshold=None,edgeitems=None,sci_mode=None,linewidth=None)
paddle.sgn(x,name=None)
paddle.shape(input)
paddle.shard_index(input,index_num,nshards,shard_id,ignore_value=-1)
paddle.sign(x,name=None)
paddle.sin(x,name=None)
paddle.sinh(x,name=None)
paddle.slice(input,axes,starts,ends)
paddle.sort(x,axis=-1,descending=False,name=None)
paddle.split(x,num_or_sections,axis=0,name=None)
paddle.sqrt(x,name=None)
paddle.square(x,name=None)
paddle.squeeze(x,axis=None,name=None)
paddle.squeeze_(x,axis=None,name=None)
paddle.stack(x,axis=0,name=None)
paddle.standard_normal(shape,dtype=None,name=None)
paddle.stanh(x,scale_a=0.67,scale_b=1.7159,name=None)
paddle.std(x,axis=None,unbiased=True,keepdim=False,name=None)
paddle.strided_slice(x,axes,starts,ends,strides,name=None)
paddle.subtract(x,y,name=None)
paddle.sum(x,axis=None,dtype=None,keepdim=False,name=None)
paddle.summary(net,input_size=None,dtypes=None,input=None)
paddle.t(input,name=None)
paddle.take(x,index,mode='raise',name=None)
paddle.take_along_axis(arr,indices,axis)
paddle.tan(x,name=None)
paddle.tanh(x,name=None)
paddle.tanh_(x,name=None)
paddle.tensordot(x,y,axes=2,name=None)
paddle.tile(x,repeat_times,name=None)
paddle.to_tensor(data,dtype=None,place=None,stop_gradient=True)
paddle.tolist(x)
paddle.topk(x,k,axis=None,largest=True,sorted=True,name=None)
paddle.trace(x,offset=0,axis1=0,axis2=1,name=None)
paddle.transpose(x,perm,name=None)
paddle.tril(x,diagonal=0,name=None)
paddle.tril_indices(row,col,offset=0,dtype='int64')
paddle.triu(x,diagonal=0,name=None)
paddle.triu_indices(row,col=None,offset=0,dtype='int64')
paddle.trunc(input,name=None)
paddle.unbind(input,axis=0)
paddle.uniform(shape,dtype=None,min=-1.0,max=1.0,seed=0,name=None)
paddle.unique(x,return_index=False,return_inverse=False,return_counts=False,axis=None,dtype='int64',name=None)
paddle.unique_consecutive(x,return_inverse=False,return_counts=False,axis=None,dtype='int64',name=None)
paddle.unsqueeze(x,axis,name=None)
paddle.unsqueeze_(x,axis,name=None)
paddle.unstack(x,axis=0,num=None)
paddle.var(x,axis=None,unbiased=True,keepdim=False,name=None)
paddle.where(condition,x=None,y=None,name=None)
paddle.zeros(shape,dtype=None,name=None)
paddle.zeros_like(x,dtype=None,name=None)
paddle.amp.auto_cast(enable=True,custom_white_list=None,custom_black_list=None,level='O1',dtype='float16')
paddle.amp.decorate(models,optimizers=None,level='O1',master_weight=None,save_dtype=None)
classpaddle.amp.GradScaler(enable=True,init_loss_scaling=32768.0,incr_ratio=2.0,decr_ratio=0.5,incr_every_n_steps=1000,decr_every_n_nan_or_inf=2,use_dynamic_loss_scaling=True)
paddle.audio.backends.set_backend(backend_name:str)
paddle.audio.save(filepath:str,src:paddle.Tensor,sample_rate:int,channels_first:bool=True,encoding:Optional[str]=None,bits_per_sample:Optional[int]=16)
paddle.autograd.backward(tensors,grad_tensors=None,retain_graph=False)
paddle.autograd.PyLayer
paddle.autograd.PyLayerContext
classpaddle.callbacks.Callback
classpaddle.callbacks.EarlyStopping(monitor='loss',mode='auto',patience=0,verbose=1,min_delta=0,baseline=None,save_best_model=True)
classpaddle.callbacks.LRScheduler(by_step=True,by_epoch=False)
classpaddle.callbacks.ModelCheckpoint(save_freq=1,save_dir=None)
classpaddle.callbacks.ProgBarLogger(log_freq=1,verbose=2)
classpaddle.callbacks.ReduceLROnPlateau(monitor='loss',factor=0.1,patience=10,verbose=1,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0)
classpaddle.callbacks.VisualDL(log_dir)
paddle.device.cuda.current_stream(device=None)
paddle.device.cuda.device_count()
paddle.device.cuda.empty_cache()
paddle.device.cu
paddle.device.cuda.get_device_capability(device=None)
paddle.device.cuda.get_device_name(device=None)
paddle.device.cuda.get_device_properties(device=None)
paddle.device.cuda.max_memory_allocated(device=None)
paddle.device.cuda.max_memory_reserved(device=None)
paddle.device.cuda.memory_allocated(device=None)
paddle.device.cuda.memory_reserved(device=None)
paddle.device.cud
paddle.device.cuda.stream_guard(stream)
paddle.device.cuda.synchronize(device=None)
paddle.device.get_all_custom_device_type()
paddle.device.get_all_device_type()
paddle.device.get_available_custom_device()
paddle.device.get_available_device()
paddle.device.get_cudnn_version()
paddle.device.get_device()
paddle.device.IPUPlace()
paddle.device.is_compiled_with_cinn()
paddle.device.is_compiled_with_cuda()
paddle.device.is_compiled_with_ipu()
paddle.device.is_compiled_with_mlu()
paddle.device.is_compiled_with_npu()
paddle.device.is_compiled_with_rocm()
paddle.audio.save(filepath:str,src:paddle.Tensor,sample_rate:int,channels_first:bool=True,encoding:Optional[str]=None,bits_per_sample:Optional[int]=16)
paddle.autograd.backward(tensors,grad_tensors=None,retain_graph=False)
paddle.autograd.PyLayer
paddle.autograd.PyLayerContext
classpaddle.callbacks.Callback
classpaddle.callbacks.EarlyStopping(monitor='loss',mode='auto',patience=0,verbose=1,min_delta=0,baseline=None,save_best_model=True)
classpaddle.callbacks.LRScheduler(by_step=True,by_epoch=False)
classpaddle.callbacks.ModelCheckpoint(save_freq=1,save_dir=None)
classpaddle.callbacks.ProgBarLogger(log_freq=1,verbose=2)
classpaddle.callbacks.ReduceLROnPlateau(monitor='loss',factor=0.1,patience=10,verbose=1,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0)
classpaddle.callbacks.VisualDL(log_dir)
paddle.device.cuda.current_stream(device=None)
paddle.device.cuda.device_count()
paddle.device.cuda.empty_cache()
paddle.audio.save(filepath:str,src:paddle.Tensor,sample_rate:int,channels_first:bool=True,encoding:Optional[str]=None,bits_per_sample:Optional[int]=16)
paddle.audio.save(filepath:str,src:paddle.Tensor,sample_rate:int,channels_first:bool=True,encoding:Optional[str]=None,bits_per_sample:Optional[int]=16)paddle.autograd.backward(tensors,grad_tensors=None,retain_graph=False)
paddle.autograd.PyLayer
paddle.autograd.PyLayerContext
classpaddle.callbacks.Callback
paddle.device.is_compiled_with_xpu()
paddle.device.MLUPlace(dev_id)
paddle.device.set_device(device)
paddle.device.XPUPlace(dev_id)
paddle.distributed.all_gather(tensor_list,tensor,group=None,sync_op=True)
paddle.distributed.all_gather_object(object_list,obj,group=None)
paddle.distributed.all_reduce(tensor,op=0,group=None,sync_op=True)
paddle.distributed.alltoall(in_tensor_list,out_tensor_list,group=None,sync_op=True)
paddle.distributed.alltoall_single(in_tensor,out_tensor,in_split_sizes=None,out_split_sizes=None,group=None,sync_op=True)
paddle.distributed.barrier(group=None)
paddle.distributed.broadcast(tensor,src,group=None,sync_op=True)
paddle.distributed.communication.stream.all_gather(tensor_or_tensor_list,tensor,group=None,sync_op=True,use_calc_stream=False)
paddle.distributed.communication.stream.all_reduce(tensor,op=0,group=None,sync_op=True,use_calc_stream=False)
paddle.distributed.communication.stream.alltoall(out_tensor_or_tensor_list,in_tensor_or_tensor_list,group=None,sync_op=True,use_calc_stream=False)
paddle.distributed.communication.stream.alltoall_single(out_tensor,in_tensor,out_split_sizes=None,in_split_sizes=None,group=None,sync_op=True,use_calc_stream=False)
paddle.distributed.communication.stream.broadcast(tensor,src=0,group=None,sync_op=True,use_calc_stream=False)
paddle.distributed.communication.stream.recv(tensor,src=0,group=None,sync_op=True,use_calc_stream=False)
paddle.distributed.communication.stream.reduce(tensor,dst=0,op=0,group=None,sync_op=True,use_calc_stream=False)
paddle.distributed.communication.stream.reduce_scatter(tensor,tensor_or_tensor_list,op=0,group=None,sync_op=True,use_calc_stream=False)
paddle.distributed.communication.stream.scatter(tensor,tensor_or_tensor_list=None,src=0,group=None,sync_op=True,use_calc_stream=False)
paddle.distributed.communication.stream.send(tensor,dst=0,group=None,sync_op=True,use_calc_stream=False)
classpaddle.distributed.CountFilterEntry(count_filter)
paddle.distributed.destroy_process_group(group=None)
classpaddle.distributed.fleet.CommunicateTopology(hybrid_group_names=['data','pipe','sharding','model'],dims=[1,1,1,1])
classpaddle.distributed.fleet.DistributedStrategy
classpaddle.distributed.fleet.Fleet
classpaddle.distributed.fleet.HybridCommunicateGroup(topology)
classpaddle.distributed.fleet.MultiSlotDataGenerator
classpaddle.distributed.fleet.MultiSlotStringDataGenerator
classpaddle.distributed.fleet.PaddleCloudRoleMaker(is_collective=False,**kwargs)
classpaddle.distributed.fleet.Role
classpaddle.distributed.fleet.UserDefinedRoleMaker(is_collective=False,init_gloo=False,**kwargs)
classpaddle.distributed.fleet.UtilBase
classpaddle.distributed.fleet.utils.DistributedInfer(main_program=None,startup_program=None)
classpaddle.distributed.fleet.utils.HDFSClient(hadoop_home,configs,time_out=300000,sleep_inter=1000)
classpaddle.distributed.fleet.utils.LocalFS
paddle.distributed.fleet.utils.recompute(function,*args,**kwargs)
paddle.distributed.get_group(id=0)
paddle.distributed.get_rank(group=None)
paddle.distributed.get_world_size(group=None)
paddle.distributed.gloo_barrier()
paddle.distributed.gloo_init_parallel_env(rank_id,rank_num,server_endpoint)
paddle.distributed.gloo_release()
paddle.distributed.init_parallel_env()
classpaddle.distributed.InMemoryDataset
paddle.distributed.irecv(tensor,src=None,group=None)
paddle.distributed.is_initialized()
paddle.distributed.isend(tensor,dst,group=None)
paddle.distributed.launch()
paddle.distributed.new_group(ranks=None,backend=None,timeout=datetime.timedelta(seconds=1800))
classpaddle.distributed.ParallelEnv
classpaddle.distributed.ParallelMode
paddle.distributed.passes.new_pass(name,pass_attrs={})
classpaddle.distributed.passes.PassContext
classpaddle.distributed.passes.PassManager(passes,context=None,auto_solve_conflict=True)
classpaddle.distributed.ProbabilityEntry(probability)
classpaddle.distributed.ps.the_one_ps.BarrierTable(context,idx)
classpaddle.distributed.ps.the_one_ps.DenseTable(context,send_ctx)
classpaddle.distributed.ps.the_one_ps.GeoSparseTable(context,send_ctx)
classpaddle.distributed.ps.the_one_ps.SparseTable(context,send_ctx)
classpaddle.distributed.ps.the_one_ps.Table
classpaddle.distributed.ps.the_one_ps.TensorTable(idx,tensor_dict,role_maker)
classpaddle.distributed.ps.utils.ps_factory.CpuAsyncPsProgramBuilder(pass_ctx)
classpaddle.distributed.ps.utils.ps_factory.CpuSyncPsProgramBuilder(pass_ctx)
classpaddle.distributed.ps.utils.ps_factory.FlPsProgramBuilder(pass_ctx)
classpaddle.distributed.ps.utils.ps_factory.GeoPsProgramBuilder(pass_ctx)
classpaddle.distributed.ps.utils.ps_factory.GpuPsProgramBuilder(pass_ctx)
classpaddle.distributed.ps.utils.ps_factory.HeterAsyncPsProgramBuilder(pass_ctx)
classpaddle.distributed.ps.utils.ps_factory.NuPsProgramBuilder(pass_ctx)
classpaddle.distributed.ps.utils.ps_factory.PsProgramBuilder(pass_ctx)
classpaddle.distributed.QueueDataset
paddle.distributed.recv(tensor,src=0,group=None,sync_op=True)
paddle.distributed.reduce(tensor,dst,op=0,group=None,sync_op=True)
paddle.distributed.reduce_scatter(tensor,tensor_list,op=0,group=None,sync_op=True)
classpaddle.distributed.ReduceOp
paddle.distributed.scatter(tensor,tensor_list=None,src=0,group=None,sync_op=True)
paddle.distributed.send(tensor,dst=0,group=None,sync_op=True)
paddle.distributed.sharding.group_sharded_parallel(model,optimizer,level,scaler=None,group=None,offload=False,sync_buffers=False,buffer_max_size=8388608,segment_size=1048576,sync_comm=False)
paddle.distributed.sharding.save_group_sharded_model(model,output,optimizer=None)
classpaddle.distributed.ShowClickEntry(show_name,click_name)
paddle.distributed.spawn(func,args=(),nprocs=-1,join=True,daemon=False,**options)paddle.distributed.split(x,size,operation,axis=0,num_partitions=1,gather_out=True,weight_attr=None,bias_attr=None,name=None)
paddle.distributed.wait(tensor,group=None,use_calc_stream=True)
classpaddle.distribution.AbsTransform
classpaddle.distribution.AffineTransform(loc,scale)
classpaddle.distribution.Beta(alpha,beta)
classpaddle.distribution.Categorical(logits,name=None)
classpaddle.distribution.ChainTransform(transforms)
classpaddle.distribution.Dirichlet(concentration)
classpaddle.distribution.Distribution(batch_shape=(),event_shape=())
classpaddle.distribution.ExponentialFamily(batch_shape=(),event_shape=())
classpaddle.distribution.ExpTransform
classpaddle.distribution.Independent(base,reinterpreted_batch_rank)
classpaddle.distribution.IndependentTransform(base,reinterpreted_batch_rank)
paddle.distribution.kl_divergence(p,q)
classpaddle.distribution.Multinomial(total_count,probs)
classpaddle.distribution.Normal(loc,scale,name=None)
classpaddle.distribution.PowerTransform(power)
paddle.distribution.register_kl(cls_p,cls_q)
classpaddle.distribution.ReshapeTransform(in_event_shape,out_event_shape)
classpaddle.distribution.SigmoidTransform
classpaddle.distribution.SoftmaxTransform
classpaddle.distribution.StackTransform(transforms,axis=0)
classpaddle.distribution.StickBreakingTransform
classpaddle.distribution.TanhTransform
classpaddle.distribution.Transform
classpaddle.distribution.TransformedDistribution(base,transforms)
classpaddle.distribution.Uniform(low,high,name=None)
paddle.fft.fft(x,n=None,axis=-1,norm='backward',name=None)
paddle.fft.fft2(x,s=None,axes=(-2,-1),norm='backward',name=None)
paddle.fft.fftfreq(n,d=1.0,dtype=None,name=None)
paddle.fft.fftn(x,s=None,axes=None,norm='backward',name=None)
paddle.fft.fftshift(x,axes=None,name=None)
paddle.fft.hfft(x,n=None,axis=-1,norm='backward',name=None)
paddle.fft.hfft2(x,s=None,axes=(-2,-1),norm='backward',name=None)
paddle.fft.hfftn(x,s=None,axes=None,norm='backward',name=None)
paddle.fft.ifft(x,n=None,axis=-1,norm='backward',name=None)
paddle.fft.ifft2(x,s=None,axes=(-2,-1),norm='backward',name=None)
paddle.fft.ifftn(x,s=None,axes=None,norm='backward',name=None)
paddle.fft.ifftshift(x,axes=None,name=None)
paddle.fft.ihfft(x,n=None,axis=-1,norm='backward',name=None)
paddle.fft.ihfft2(x,s=None,axes=(-2,-1),norm='backward',name=None)
paddle.fft.ihfftn(x,s=None,axes=None,norm='backward',name=None)
paddle.fft.irfft(x,n=None,axis=-1,norm='backward',name=None)
paddle.fft.irfft2(x,s=None,axes=(-2,-1),norm='backward',name=None)
paddle.fft.irfftn(x,s=None,axes=None,norm='backward',name=None)
paddle.fft.rfft(x,n=None,axis=-1,norm='backward',name=None)
paddle.fft.rfft2(x,s=None,axes=(-2,-1),norm='backward',name=None)
paddle.fft.rfftfreq(n,d=1.0,dtype=None,name=None)
paddle.fft.rfftn(x,s=None,axes=None,norm='backward',name=None)
classpaddle.fluid.average.WeightedAverage
classpaddle.fluid.clip.ErrorClipByValue(max,min=None)
paddle.fluid.clip.set_gradient_clip(clip,param_list=None,program=None)
classpaddle.fluid.communicator.Communicator(mode,kwargs=None,envs=None)
classpaddle.fluid.communicator.FLCommunicator(ps_hosts,kwargs=None)
classpaddle.fluid.communicator.LargeScaleKV
classpaddle.fluid.contrib.decoder.beam_search_decoder.BeamSearchDecoder(state_cell,init_ids,init_scores,target_dict_dim,word_dim,input_var_dict={},topk_size=50,sparse_emb=True,max_len=100,beam_size=1,end_id=1,name=None)
classpaddle.fluid.contrib.decoder.beam_search_decoder.InitState(init=None,shape=None,value=0.0,init_boot=None,need_reorder=False,dtype='float32')
classpaddle.fluid.contrib.decoder.beam_search_decoder.StateCell(inputs,states,out_state,name=None)
classpaddle.fluid.contrib.decoder.beam_search_decoder.TrainingDecoder(state_cell,name=None)
paddle.fluid.contrib.extend_optimizer.extend_optimizer_with_weight_decay.extend_with_decoupled_weight_decay(base_optimizer)
paddle.fluid.contrib.layers.nn.batch_fc(input,param_size,param_attr,bias_size,bias_attr,act=None)
paddle.fluid.contrib.layers.nn.bilateral_slice(x,guide,grid,has_offset,name=None)
paddle.fluid.contrib.layers.nn.correlation(x,y,pad_size,kernel_size,max_displacement,stride1,stride2,corr_type_multiply=1)
paddle.fluid.contrib.layers.nn.fused_bn_add_act(x,y,momentum=0.9,epsilon=1e-05,param_attr=None,bias_attr=None,moving_mean_name=None,moving_variance_name=None,act=None,name=None)
paddle.fluid.contrib.layers.nn.fused_elemwise_activation(x,y,functor_list,axis=-1,scale=0.0,save_intermediate_out=True)
paddle.fluid.contrib.layers.nn.fused_embedding_seq_pool(input,size,is_sparse=False,padding_idx=None,combiner='sum',param_attr=None,dtype='float32')
paddle.fluid.contrib.layers.nn.fused_seqpool_cvm(input,pool_type,cvm,pad_value=0.0,use_cvm=True,cvm_offset=2)
paddle.fluid.contrib.layers.nn.match_matrix_tensor(x,y,channel_num,act=None,param_attr=None,dtype='float32',name=None)
paddle.fluid.contrib.layers.nn.multiclass_nms2(bboxes,scores,score_threshold,nms_top_k,keep_top_k,nms_threshold=0.3,normalized=True,nms_eta=1.0,background_label=0,return_index=False,name=None)
paddle.fluid.contrib.layers.nn.partial_concat(input,start_index=0,length=-1)
paddle.fluid.contrib.layers.nn.partial_sum(input,start_index=0,length=-1)
paddle.fluid.contrib.layers.nn.rank_attention(input,rank_offset,rank_param_shape,rank_param_attr,max_rank=3,max_size=0)
paddle.fluid.contrib.layers.nn.search_pyramid_hash(input,num_emb,space_len,pyramid_layer,rand_len,drop_out_percent,is_training,use_filter,white_list_len,black_list_len,seed,lr,param_attr=None,param_attr_wl=None,param_attr_bl=None,name=None,distribute_update_vars=None,dtype='float32')
paddle.fluid.contrib.layers.nn.search_pyramid_hash(input,num_emb,space_len,pyramid_layer,rand_len,drop_out_percent,is_training,use_filter,white_list_len,black_list_len,seed,lr,param_attr=None,param_attr_wl=None,param_attr_bl=None,name=None,distribute_update_vars=None,dtype='float32')
paddle.fluid.contrib.layers.nn.sequence_topk_avg_pooling(input,row,col,topks,channel_num)
paddle.fluid.contrib.layers.nn.shuffle_batch(x,seed=None)
paddle.fluid.contrib.layers.nn.tdm_child(x,node_nums,child_nums,param_attr=None,dtype='int32')
paddle.fluid.contrib.layers.nn.tdm_sampler(x,neg_samples_num_list,layer_node_num_list,leaf_node_num,tree_travel_attr=None,tree_layer_attr=None,output_positive=True,output_list=True,seed=0,tree_dtype='int32',dtype='int32')
paddle.fluid.contrib.layers.nn.tree_conv(nodes_vector,edge_set,output_size,num_filters=1,max_depth=2,act='tanh',param_attr=None,bias_attr=None,name=None)
paddle.fluid.contrib.layers.nn.var_conv_2d(input,row,col,input_channel,output_channel,filter_size,stride=1,param_attr=None,act=None,dtype='float32',name=None)
paddle.fluid.contrib.layers.rnn_impl.basic_gru(input,init_hidden,hidden_size,num_layers=1,sequence_length=None,dropout_prob=0.0,bidirectional=False,batch_first=True,param_attr=None,bias_attr=None,gate_activation=None,activation=None,dtype='float32',name='basic_gru')
paddle.fluid.contrib.layers.rnn_impl.basic_lstm(input,init_hidden,init_cell,hidden_size,num_layers=1,sequence_length=None,dropout_prob=0.0,bidirectional=False,batch_first=True,param_attr=None,bias_attr=None,gate_activation=None,activation=None,forget_bias=1.0,dtype='float32',name='basic_lstm')
classpaddle.fluid.contrib.layers.rnn_impl.BasicGRUUnit(name_scope,hidden_size,param_attr=None,bias_attr=None,gate_activation=None,activation=None,dtype='float32')
classpaddle.fluid.contrib.layers.rnn_impl.BasicLSTMUnit(name_scope,hidden_size,param_attr=None,bias_attr=None,gate_activation=None,activation=None,forget_bias=1.0,dtype='float32')
paddle.fluid.contrib.memory_usage_calc.memory_usage(program,batch_size)
paddle.fluid.contrib.mixed_precision.amp_nn.check_finite_and_unscale(x,scale,name=None,float_status=None)
paddle.fluid.contrib.mixed_precision.amp_nn.update_loss_scaling(x,found_inf,prev_loss_scaling,num_good_steps,num_bad_steps,incr_every_n_steps,decr_every_n_nan_or_inf,incr_ratio,decr_ratio,stop_update=False,name=None)
classpaddle.fluid.contrib.mixed_precision.bf16.amp_lists.AutoMixedPrecisionListsBF16(custom_bf16_list=None,custom_fp32_list=None,custom_fp32_varnames=None)
paddle.fluid.contrib.mixed_precision.bf16.amp_utils.bf16_guard()
paddle.fluid.contrib.mixed_precision.bf16.amp_utils.cast_model_to_bf16(program,startup_prog=None,amp_lists=None,use_bf16_guard=True)
paddle.fluid.contrib.mixed_precision.bf16.amp_utils.cast_parameters_to_bf16(place,program,scope=None,to_bf16_var_names=None)
paddle.fluid.contrib.mixed_precision.bf16.amp_utils.convert_float_to_uint16(in_list)
paddle.fluid.contrib.mixed_precision.bf16.amp_utils.rewrite_program_bf16(main_prog,amp_lists=None)
paddle.fluid.contrib.mixed_precision.bf16.decorator.decorate_bf16(optimizer,amp_lists=None,use_pure_bf16=False,use_bf16_guard=None)
paddle.fluid.contrib.mixed_precision.decorator.decorate(optimizer,amp_lists=None,init_loss_scaling=32768,incr_every_n_steps=1000,decr_every_n_nan_or_inf=2,incr_ratio=2.0,decr_ratio=0.8,use_dynamic_loss_scaling=True,use_pure_fp16=False,use_fp16_guard=None)
classpaddle.fluid.contrib.mixed_precision.fp16_lists.AutoMixedPrecisionLists(custom_white_list=None,custom_black_list=None,custom_black_varnames=None)
paddle.fluid.contrib.mixed_precision.fp16_utils.cast_model_to_fp16(program,amp_lists=None,use_fp16_guard=True)
paddle.fluid.contrib.mixed_precision.fp16_utils.cast_parameters_to_fp16(place,program,scope=None,to_fp16_var_names=None)
paddle.fluid.contrib.mixed_precision.fp16_utils.fp16_guard()
paddle.fluid.contrib.op_frequence.op_freq_statistic(program)
classpaddle.fluid.contrib.optimizer.Momentum(learning_rate,momentum,parameter_list=None,use_nesterov=False,regularization=None,grad_clip=None,multi_precision=False,rescale_grad=1.0,name=None)
classpaddle.fluid.contrib.quantize.quantize_transpiler.QuantizeTranspiler(weight_bits=8,activation_bits=8,activation_quantize_type='abs_max',weight_quantize_type='abs_max',window_size=10000,moving_rate=0.9)
paddle.fluid.contrib.slim.quantization.cal_kl_threshold.cal_kl_threshold(hist,bin_width,bits)
classpaddle.fluid.contrib.slim.quantization.imperative.ptq.ImperativePTQ(quant_config=<paddle.fluid.contrib.slim.quantization.imperative.ptq_config.PTQConfigobject>)
classpaddle.fluid.contrib.slim.quantization.imperative.ptq_config.PTQConfig(activation_quantizer,weight_quantizer)
classpaddle.fluid.contrib.slim.quantization.imperative.ptq_quantizer.AbsmaxQuantizer(quant_bits=8)
classpaddle.fluid.contrib.slim.quantization.imperative.ptq_quantizer.BaseQuantizer(quant_bits=8)
classpaddle.fluid.contrib.slim.quantization.imperative.ptq_quantizer.HistQuantizer(quant_bits=8,bins=1024,upsample_bins=64,hist_percent=0.99999)
classpaddle.fluid.contrib.slim.quantization.imperative.ptq_quantizer.KLQuantizer(quant_bits=8,bins=1024,upsample_bins=64)
classpaddle.fluid.contrib.slim.quantization.imperative.ptq_quantizer.PerChannelAbsmaxQuantizer(quant_bits=8)
classpaddle.fluid.contrib.slim.quantization.imperative.ptq_registry.PTQRegistry
classpaddle.fluid.contrib.slim.quantization.imperative.qat.ImperativeQuantAware(quantizable_layer_type=['Conv2D','Linear','Conv2DTranspose','ColumnParallelLinear','RowParallelLinear'],weight_quantize_type='abs_max',activation_quantize_type='moving_average_abs_max',weight_bits=8,activation_bits=8,moving_rate=0.9,fuse_conv_bn=False,weight_preprocess_layer=None,act_preprocess_layer=None,weight_quantize_layer=None,act_quantize_layer=None,onnx_format=False)
classpaddle.fluid.contrib.slim.quantization.post_training_quantization.PostTrainingQuantization(executor,model_dir,scope=None,model_filename=None,params_filename=None,batch_generator=None,sample_generator=None,data_loader=None,batch_size=10,batch_nums=None,algo='KL',hist_percent=0.99999,quantizable_op_type=['conv2d','depthwise_conv2d','mul'],round_type='round',learning_rate=0.001,is_full_quantize=False,bias_correction=False,activation_bits=8,weight_bits=8,activation_quantize_type='range_abs_max',weight_quantize_type='channel_wise_abs_max',onnx_format=False,freeze_model=True,optimize_model=False,is_use_cache_file=False,skip_tensor_list=None,same_scale_tensor_list=None,cache_dir=None,scale_dict=None,return_graph=False)
classpaddle.fluid.contrib.slim.quantization.post_training_quantization.PostTrainingQuantizationProgram(executor,program,feed_list=None,fetch_list=None,scope=None,batch_generator=None,sample_generator=None,data_loader=None,batch_size=10,batch_nums=None,algo='KL',hist_percent=0.99999,quantizable_op_type=['conv2d','depthwise_conv2d','mul'],round_type='round',learning_rate=0.001,is_full_quantize=False,bias_correction=False,activation_bits=8,weight_bits=8,activation_quantize_type='range_abs_max',weight_quantize_type='channel_wise_abs_max',onnx_format=False,freeze_model=True,optimize_model=False,is_use_cache_file=False,skip_tensor_list=None,same_scale_tensor_list=None,cache_dir=None,scale_dict=None,return_graph=True)
classpaddle.fluid.contrib.slim.quantization.post_training_quantization.WeightQuantization(model_dir,model_filename=None,params_filename=None)
classpaddle.fluid.contrib.slim.quantization.quant2_int8_mkldnn_pass.Quant2Int8MkldnnPass(_ops_to_quantize,_op_ids_to_skip=None,_scope=None,_place=None,_core=None,_debug=False)
classpaddle.fluid.contrib.slim.quantization.quant_int8_mkldnn_pass.QuantInt8MkldnnPass(_scope=None,_place=None)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.AddQuantDequantForInferencePass(scope,place,quant_bits=8)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.AddQuantDequantPass(scope=None,place=None,moving_rate=0.9,quant_bits=8,skip_pattern=['skip_quant'],quantizable_op_type=['elementwise_add','pool2d'],is_full_quantized=False,is_test=None,scale_dict=None)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.AddQuantDequantPassV2(scope=None,place=None,moving_rate=0.9,quant_bits=8,skip_pattern=['skip_quant'],quantizable_op_type=['elementwise_add','pool2d'],is_full_quantized=False,is_test=None,scale_dict=None)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.ConvertToInt8Pass(scope,place,quantizable_op_type=None)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.OutScaleForInferencePass(scope=None)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.OutScaleForTrainingPass(scope=None,place=None,moving_rate=0.9,is_test=None,scale_dict=None)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.QuantizationFreezePass(scope,place,bias_correction=False,weight_bits=8,activation_bits=8,round_type='round',weight_quantize_type='abs_max',quantizable_op_type=None)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.QuantizationTransformPass(scope=None,place=None,weight_bits=8,activation_bits=8,activation_quantize_type='abs_max',weight_quantize_type='abs_max',window_size=10000,moving_rate=0.9,skip_pattern=['skip_quant'],quantizable_op_type=['conv2d','depthwise_conv2d','mul'],weight_quantize_func=None,act_quantize_func=None,weight_preprocess_func=None,act_preprocess_func=None,optimizer_func=None,executor=None,is_test=None)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.QuantizationTransformPassV2(scope=None,place=None,weight_bits=8,activation_bits=8,activation_quantize_type='abs_max',weight_quantize_type='abs_max',window_size=10000,moving_rate=0.9,skip_pattern=['skip_quant'],quantizable_op_type=['conv2d','depthwise_conv2d','mul'],weight_quantize_func=None,act_quantize_func=None,weight_preprocess_func=None,act_preprocess_func=None,optimizer_func=None,executor=None,is_test=None)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.QuantWeightPass(scope,place,bias_correction=False,quant_bits=8,save_int_weight=True)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.ReplaceFakeQuantDequantPass(scope,place,quant_bits=8)
classpaddle.fluid.contrib.slim.quantization.quantization_pass.TransformForMobilePass
paddle.fluid.contrib.sparsity.utils.check_mask_1d(mat,n,m)
paddle.fluid.contrib.sparsity.utils.check_mask_2d(mat,n,m)
paddle.fluid.contrib.sparsity.utils.check_sparsity(tensor,func_name=CheckMethod.CHECK_1D,n=2,m=4)
classpaddle.fluid.contrib.sparsity.utils.CheckMethod(value)
paddle.fluid.contrib.sparsity.utils.create_mask(tensor,func_name=MaskAlgo.MASK_1D,n=2,m=4)
paddle.fluid.contrib.sparsity.utils.get_mask_1d(mat,n,m)
paddle.fluid.contrib.sparsity.utils.get_mask_2d_best(mat,n,m)
paddle.fluid.contrib.sparsity.utils.get_mask_2d_greedy(mat,n,m)
classpaddle.fluid.contrib.sparsity.utils.MaskAlgo(value)
paddle.fluid.data(name,shape,dtype='float32',lod_level=0)
classpaddle.fluid.data_feed_desc.DataFeedDesc(proto_file)
classpaddle.fluid.data_feeder.DataFeeder(feed_list,place,program=None)
paddle.fluid.dataloader.collate.default_collate_fn(batch)
classpaddle.fluid.dataset.DatasetFactory
classpaddle.fluid.dataset.InMemoryDataset
classpaddle.fluid.dataset.QueueDataset
classpaddle.fluid.device_worker.DeviceWorker
classpaddle.fluid.device_worker.DownpourSGD
classpaddle.fluid.device_worker.DownpourSGDOPT
classpaddle.fluid.device_worker.HeterSection
classpaddle.fluid.device_worker.Hogwild
classpaddle.fluid.device_worker.Section
paddle.fluid.dygraph.amp.auto_cast.amp_decorate(models,optimizers=None,level='O1',master_weight=None,save_dtype=None)
paddle.fluid.dygraph.amp.auto_cast.amp_guard(enable=True,custom_white_list=None,custom_black_list=None,level='O1',dtype='float16')
classpaddle.fluid.dygraph.amp.loss_scaler.AmpScaler(enable=True,init_loss_scaling=32768.0,incr_ratio=2.0,decr_ratio=0.5,incr_every_n_steps=1000,decr_every_n_nan_or_inf=1,use_dynamic_loss_scaling=True)
classpaddle.fluid.dygraph.amp.loss_scaler.OptimizerState(value)
paddle.fluid.dygraph.base.enabled()
paddle.fluid.dygraph.base.guard(place=None)
paddle.fluid.dygraph.base.no_grad(func=None)
paddle.fluid.dygraph.base.to_variable(value,name=None,zero_copy=None,dtype=None)
paddle.fluid.dygraph.checkpoint.load_dygraph(model_path,**configs)
paddle.fluid.dygraph.checkpoint.save_dygraph(state_dict,model_path)
classpaddle.fluid.dygraph.dygraph_to_static.ast_transformer.DygraphToStaticAst
classpaddle.fluid.dygraph.dygraph_to_static.break_continue_transformer.BreakContinueTransformer(wrapper_root)
paddle.fluid.dygraph.dygraph_to_static.convert_call_func.convert_call(func)
classpaddle.fluid.dygraph.dygraph_to_static.logging_utils.TranslatorLogger(**kwargs)
classpaddle.fluid.dygraph.dygraph_to_static.loop_transformer.LoopTransformer(wrapper_root)
classpaddle.fluid.dygraph.dygraph_to_static.loop_transformer.NameVisitor(root_node)
paddle.fluid.dygraph.dygraph_to_static.program_translator.convert_to_static(function)
classpaddle.fluid.dygraph.dygraph_to_static.return_transformer.ReturnTransformer(wrapper_root)
classpaddle.fluid.dygraph.dygraph_to_static.static_analysis.AstNodeWrapper(node)
classpaddle.fluid.dygraph.dygraph_to_static.static_analysis.NodeVarType
classpaddle.fluid.dygraph.dygraph_to_static.static_analysis.StaticAnalysisVisitor(ast_root=None)
paddle.fluid.dygraph.dygraph_to_static.variable_trans_func.create_bool_as_type(x,value=True)
paddle.fluid.dygraph.dygraph_to_static.variable_trans_func.create_fill_constant_node(name,value=0)
paddle.fluid.dygraph.dygraph_to_static.variable_trans_func.create_undefined_var(name)
paddle.fluid.dygraph.dygraph_to_static.variable_trans_func.to_static_variable(x)
paddle.fluid.dygraph.jit.dygraph_to_static_func(func,*args,**kwargs)
classpaddle.fluid.dygraph.learning_rate_scheduler.CosineDecay(learning_rate,step_each_epoch,epochs,begin=0,step=1,dtype='float32')
classpaddle.fluid.dygraph.learning_rate_scheduler.ExponentialDecay(learning_rate,decay_steps,decay_rate,staircase=False,begin=0,step=1,dtype='float32')
classpaddle.fluid.dygraph.learning_rate_scheduler.InverseTimeDecay(learning_rate,decay_steps,decay_rate,staircase=False,begin=0,step=1,dtype='float32')
classpaddle.fluid.dygraph.learning_rate_scheduler.LambdaDecay(learning_rate,lr_lambda)
classpaddle.fluid.dygraph.learning_rate_scheduler.LinearLrWarmup(learning_rate,warmup_steps,start_lr,end_lr,begin=1,step=1,dtype='float32')
classpaddle.fluid.dygraph.learning_rate_scheduler.MultiStepDecay(learning_rate,milestones,decay_rate=0.1)
classpaddle.fluid.dygraph.learning_rate_scheduler.NaturalExpDecay(learning_rate,decay_steps,decay_rate,staircase=False,begin=0,step=1,dtype='float32')
classpaddle.fluid.dygraph.learning_rate_scheduler.NoamDecay(d_model,warmup_steps,begin=1,step=1,dtype='float32',learning_rate=1.0)
classpaddle.fluid.dygraph.learning_rate_scheduler.PiecewiseDecay(boundaries,values,begin,step=1,dtype='float32')
classpaddle.fluid.dygraph.learning_rate_scheduler.PolynomialDecay(learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,begin=0,step=1,dtype='float32')
classpaddle.fluid.dygraph.learning_rate_scheduler.ReduceLROnPlateau(learning_rate,mode='min',decay_rate=0.1,patience=10,verbose=False,threshold=0.0001,threshold_mode='rel',cooldown=0,min_lr=0,eps=1e-08,dtype='float32')
classpaddle.fluid.dygraph.learning_rate_scheduler.StepDecay(learning_rate,step_size,decay_rate=0.1)
classpaddle.fluid.dygraph.nn.BilinearTensorProduct(input1_dim,input2_dim,output_dim,name=None,act=None,param_attr=None,bias_attr=None,dtype='float32')
classpaddle.fluid.dygraph.nn.Conv2D(num_channels,num_filters,filter_size,stride=1,padding=0,dilation=1,groups=None,param_attr=None,bias_attr=None,use_cudnn=True,act=None,dtype='float32')
classpaddle.fluid.dygraph.nn.Conv2DTranspose(num_channels,num_filters,filter_size,output_size=None,padding=0,stride=1,dilation=1,groups=None,param_attr=None,bias_attr=None,use_cudnn=True,act=None,dtype='float32')
classpaddle.fluid.dygraph.nn.Conv3D(num_channels,num_filters,filter_size,stride=1,padding=0,dilation=1,groups=None,param_attr=None,bias_attr=None,use_cudnn=True,act=None,dtype='float32')
classpaddle.fluid.dygraph.nn.Conv3DTranspose(num_channels,num_filters,filter_size,padding=0,stride=1,dilation=1,groups=None,param_attr=None,bias_attr=None,use_cudnn=True,act=None,dtype='float32')
classpaddle.fluid.dygraph.nn.Dropout(p=0.5,seed=None,dropout_implementation='downgrade_in_infer',is_test=False)
classpaddle.fluid.dygraph.nn.Embedding(size,is_sparse=False,is_distributed=False,padding_idx=None,param_attr=None,dtype='float32')
classpaddle.fluid.dygraph.nn.GroupNorm(channels,groups,epsilon=1e-05,param_attr=None,bias_attr=None,act=None,data_layout='NCHW',dtype='float32')
classpaddle.fluid.dygraph.nn.GRUUnit(size,param_attr=None,bias_attr=None,activation='tanh',gate_activation='sigmoid',origin_mode=False,dtype='float32')
classpaddle.fluid.dygraph.nn.InstanceNorm(num_channels,epsilon=1e-05,param_attr=None,bias_attr=None,dtype='float32')
classpaddle.fluid.dygraph.nn.LayerNorm(normalized_shape,scale=True,shift=True,epsilon=1e-05,param_attr=None,bias_attr=None,act=None,dtype='float32')
classpaddle.fluid.dygraph.nn.Linear(input_dim,output_dim,param_attr=None,bias_attr=None,act=None,dtype='float32')
classpaddle.fluid.dygraph.nn.NCE(num_total_classes,dim,sample_weight=None,param_attr=None,bias_attr=None,num_neg_samples=None,sampler='uniform',custom_dist=None,seed=0,is_sparse=False,dtype='float32')
classpaddle.fluid.dygraph.nn.Pool2D(pool_size=-1,pool_type='max',pool_stride=1,pool_padding=0,global_pooling=False,use_cudnn=True,ceil_mode=False,exclusive=True,data_format='NCHW')
classpaddle.fluid.dygraph.nn.PRelu(mode,channel=None,input_shape=None,param_attr=None,dtype='float32')
classpaddle.fluid.dygraph.nn.TreeConv(feature_size,output_size,num_filters=1,max_depth=2,act='tanh',param_attr=None,bias_attr=None,name=None,dtype='float32')
paddle.fluid.dygraph.parallel.prepare_context(strategy=None)
classpaddle.fluid.dygraph.rnn.GRUCell(hidden_size,input_size,param_attr=None,bias_attr=None,gate_activation=None,activation=None,use_cudnn_impl=True,dtype='float64')
classpaddle.fluid.dygraph.rnn.LSTMCell(hidden_size,input_size,param_attr=None,bias_attr=None,gate_activation=None,activation=None,forget_bias=1.0,use_cudnn_impl=True,dtype='float64')
classpaddle.fluid.evaluator.ChunkEvaluator(input,label,chunk_scheme,num_chunk_types,excluded_chunk_types=None)
classpaddle.fluid.evaluator.DetectionMAP(input,gt_label,gt_box,gt_difficult=None,class_num=None,background_label=0,overlap_threshold=0.5,evaluate_difficult=True,ap_version='integral')
classpaddle.fluid.evaluator.EditDistance(input,label,ignored_tokens=None,**kwargs)
paddle.fluid.framework.cuda_pinned_places(device_count=None)
paddle.fluid.framework.in_dygraph_mode()
paddle.fluid.framework.is_compiled_with_npu()
paddle.fluid.framework.is_compiled_with_xpu()
classpaddle.fluid.generator.Generator(place=None)
classpaddle.fluid.incubate.fleet.parameter_server.pslib.optimizer_factory.DistributedAdam(optimizer)
classpaddle.fluid.initializer.ConstantInitializer(value=0.0,force_cpu=False)
classpaddle.fluid.initializer.MSRAInitializer(uniform=True,fan_in=None,seed=0,negative_slope=0,nonlinearity='relu')
classpaddle.fluid.initializer.NormalInitializer(loc=0.0,scale=1.0,seed=0)
classpaddle.fluid.initializer.NumpyArrayInitializer(value)
classpaddle.fluid.initializer.TruncatedNormalInitializer(loc=0.0,scale=1.0,seed=0)
classpaddle.fluid.initializer.UniformInitializer(low=-1.0,high=1.0,seed=0,diag_num=0,diag_step=0,diag_val=1.0)
classpaddle.fluid.initializer.XavierInitializer(uniform=True,fan_in=None,fan_out=None,seed=0)
paddle.fluid.input.one_hot(input,depth,allow_out_of_range=False)
paddle.fluid.install_check.run_check()
paddle.fluid.io.get_program_parameter(program)
paddle.fluid.io.get_program_persistable_vars(program)
paddle.fluid.io.load_inference_model(dirname,executor,model_filename=None,params_filename=None,pserver_endpoints=None)
paddle.fluid.io.load_params(executor,dirname,main_program=None,filename=None)
paddle.fluid.io.load_persistables(executor,dirname,main_program=None,filename=None)
paddle.fluid.io.load_vars(executor,dirname,main_program=None,vars=None,predicate=None,filename=None)
paddle.fluid.io.save_inference_model(dirname,feeded_var_names,target_vars,executor,main_program=None,model_filename=None,params_filename=None,export_for_deployment=True,program_only=False,clip_extra=True)
paddle.fluid.io.save_params(executor,dirname,main_program=None,filename=None)
paddle.fluid.io.save_persistables(executor,dirname,main_program=None,filename=None)
paddle.fluid.io.save_vars(executor,dirname,main_program=None,vars=None,predicate=None,filename=None)
classpaddle.fluid.layer_helper_base.LayerHelperBase(name,layer_type)
classpaddle.fluid.layers.BasicDecoder(cell,helper,output_fn=None)
paddle.fluid.layers.beam_search(pre_ids,pre_scores,ids,scores,beam_size,end_id,level=0,is_accumulated=True,name=None,return_parent_idx=False)
paddle.fluid.layers.beam_search_decode(ids,scores,beam_size,end_id,name=None)
paddle.fluid.layers.birnn(cell_fw,cell_bw,inputs,initial_states=None,sequence_length=None,time_major=False,**kwargs)
paddle.fluid.layers.control_flow.array_length(array)
paddle.fluid.layers.control_flow.array_read(array,i)
paddle.fluid.layers.control_flow.array_write(x,i,array=None)
paddle.fluid.layers.control_flow.Assert(cond,data=None,summarize=20,name=None)
paddle.fluid.layers.control_flow.create_array(dtype,initialized_list=None)
classpaddle.fluid.layers.control_flow.DynamicRNN(name=None)
paddle.fluid.layers.control_flow.equal(x,y,cond=None,name=None)
paddle.fluid.layers.control_flow.greater_equal(x,y,cond=None,name=None)
paddle.fluid.layers.control_flow.greater_than(x,y,cond=None,name=None)
classpaddle.fluid.layers.control_flow.IfElse(cond,name=None)
paddle.fluid.layers.control_flow.increment(x,value=1.0,in_place=True)
paddle.fluid.layers.control_flow.is_empty(x,name=None)
paddle.fluid.layers.control_flow.less_equal(x,y,cond=None,name=None)
paddle.fluid.layers.control_flow.less_than(x,y,force_cpu=None,cond=None,name=None)
paddle.fluid.layers.control_flow.not_equal(x,y,cond=None,name=None)
paddle.fluid.layers.control_flow.reorder_lod_tensor_by_rank(x,rank_table)
classpaddle.fluid.layers.control_flow.Switch(name=None)
classpaddle.fluid.layers.control_flow.While(cond,is_test=False,name=None)
classpaddle.fluid.layers.DecodeHelper
classpaddle.fluid.layers.Decoder
paddle.fluid.layers.detection.anchor_generator(input,anchor_sizes=None,aspect_ratios=None,variance=[0.1,0.1,0.2,0.2],stride=None,offset=0.5,name=None)
paddle.fluid.layers.detection.bipartite_match(dist_matrix,match_type=None,dist_threshold=None,name=None)
paddle.fluid.layers.detection.box_clip(input,im_info,name=None)
paddle.fluid.layers.detection.box_coder(prior_box,prior_box_var,target_box,code_type='encode_center_size',box_normalized=True,name=None,axis=0)
paddle.fluid.layers.detection.box_decoder_and_assign(prior_box,prior_box_var,target_box,box_score,box_clip,name=None)
paddle.fluid.layers.detection.collect_fpn_proposals(multi_rois,multi_scores,min_level,max_level,post_nms_top_n,rois_num_per_level=None,name=None)
paddle.fluid.layers.detection.density_prior_box(input,image,densities=None,fixed_sizes=None,fixed_ratios=None,variance=[0.1,0.1,0.2,0.2],clip=False,steps=[0.0,0.0],offset=0.5,flatten_to_2d=False,name=None)
paddle.fluid.layers.detection.detection_output(loc,scores,prior_box,prior_box_var,background_label=0,nms_threshold=0.3,nms_top_k=400,keep_top_k=200,score_threshold=0.01,nms_eta=1.0,return_index=False)
paddle.fluid.layers.detection.distribute_fpn_proposals(fpn_rois,min_level,max_level,refer_level,refer_scale,rois_num=None,name=None)
paddle.fluid.layers.detection.generate_mask_labels(im_info,gt_classes,is_crowd,gt_segms,rois,labels_int32,num_classes,resolution)
paddle.fluid.layers.detection.generate_proposal_labels(rpn_rois,gt_classes,is_crowd,gt_boxes,im_info,batch_size_per_im=256,fg_fraction=0.25,fg_thresh=0.25,bg_thresh_hi=0.5,bg_thresh_lo=0.0,bbox_reg_weights=[0.1,0.1,0.2,0.2],class_nums=None,use_random=True,is_cls_agnostic=False,is_cascade_rcnn=False,max_overlap=None,return_max_overlap=False)
